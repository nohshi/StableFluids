// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel AddSourceVelocity
#pragma kernel AddSourceDensity

#pragma kernel AdvectVelocityX
#pragma kernel AdvectVelocityY

#pragma kernel DiffuseVelocityX
#pragma kernel DiffuseVelocityY

#pragma kernel ApplySourceVelocity
#pragma kernel ApplySourceDensity

#pragma kernel ProjectStep1
#pragma kernel ProjectStep2
#pragma kernel ProjectStep3X
#pragma kernel ProjectStep3Y

#pragma kernel DiffuseDensity
#pragma kernel AdvectDensity
#pragma kernel DissipateDensity

#pragma kernel Draw

#define THREAD_X 32
#define THREAD_Y 32
#define THREAD_Z 1

//係数等
float u_diff;
float u_visc;
float u_dt;
float u_velocityCoef;
float u_densityCoef;
float2 u_mousePos;
float2 u_mouseVel;
float u_mouseRadius;

RWTexture2D<float2> sourceVelocity;
RWTexture2D<float> sourceDensity;

RWTexture2D<float> vx;
RWTexture2D<float> prevVx;

RWTexture2D<float> vy;
RWTexture2D<float> prevVy;

RWTexture2D<float> pressure;
RWTexture2D<float> divergence;

RWTexture2D<float> density;
RWTexture2D<float> prevDensity;

RWTexture2D<float4>	canvas; 

//------------------------------------境界での処理
void SetBoundaryDensity(uint2 id, uint w, uint h){
    density[id] = (id.x == 0) ? density[id + uint2(1,0)] : density[id];
    density[id] = (id.x == w-1) ? density[uint2(w-2, id.y)] : density[id];
    density[id] = (id.y == 0) ? density[id + uint2(0,1)] : density[id];
    density[id] = (id.y == h-1) ? density[uint2(id.x, h-2)] : density[id];

    density[id] = (id.x == 0 && id.y == 0) ? 0.5 * (density[uint2(1,0)] + density[uint2(0,1)]) : density[id];
    density[id] = (id.x == 0 && id.y == h-1) ? 0.5 * (density[uint2(1,h-1)] + density[uint2(0,h-2)]) : density[id];
    density[id] = (id.x == w-1 && id.y == 0) ? 0.5 * (density[uint2(w-2,0)] + density[uint2(w-1,1)]) : density[id];
    density[id] = (id.x == w-1 && id.y == h-1) ? 0.5 * (density[uint2(w-2,h-1)] + density[uint2(w-1,h-2)]) : density[id];
}

void SetBoundaryVelocityX(uint2 id, uint w, uint h) {
    // vx[id] = (id.x == 0)   ? -vx[uint2(id.x+1, id.y)] : vx[id];
    // vx[id] = (id.x == w-1) ? -vx[uint2(id.x-1, id.y)] : vx[id];
    vx[id] = (id.x == 0)   ? 0 : vx[id];
    vx[id] = (id.x == w-1) ? 0 : vx[id];

    vx[id] = (id.y == 0)   ? 0 : vx[id];
    vx[id] = (id.y == h-1) ? 0 : vx[id];
}

void SetBoundaryVelocityY(uint2 id, uint w, uint h) {
    // vy[id] = (id.y == 0)   ? -vy[uint2(id.x, id.y+1)] : vy[id];
    // vy[id] = (id.y == h-1) ? -vy[uint2(id.x, id.y-1)] : vy[id];
    vy[id] = (id.y == 0)   ? 0 : vy[id];
    vy[id] = (id.y == h-1) ? 0 : vy[id];

    vy[id] = (id.x == 0)   ? 0 : vy[id];
    vy[id] = (id.x == w-1) ? 0 : vy[id];
}

void SetBoundaryPressure(uint2 id, uint w, uint h) {
    pressure[id] = (id.x == 0) ?   pressure[uint2(id.x+1, id.y)] : pressure[id];
    pressure[id] = (id.x == w-1) ? pressure[uint2(id.x-1, id.y)] : pressure[id];
    pressure[id] = (id.y == 0) ?   pressure[uint2(id.x, id.y+1)] : pressure[id];
    pressure[id] = (id.y == h-1) ? pressure[uint2(id.x, id.y-1)] : pressure[id];

    pressure[id] = (id.x == 0 && id.y == 0) ? 0.5 * (pressure[uint2(1,0)] + pressure[uint2(0,1)]) : pressure[id];
    pressure[id] = (id.x == 0 && id.y == h-1) ? 0.5 * (pressure[uint2(1,h-1)] + pressure[uint2(0,h-2)]) : pressure[id];
    pressure[id] = (id.x == w-1 && id.y == 0) ? 0.5 * (pressure[uint2(w-2,0)] + pressure[uint2(w-1,1)]) : pressure[id];
    pressure[id] = (id.x == w-1 && id.y == h-1) ? 0.5 * (pressure[uint2(w-2,h-1)] + pressure[uint2(w-1,h-2)]) : pressure[id];
    
}

void SetBoundaryDivergence(uint2 id, uint w, uint h) {
    divergence[id] = (id.x == 0) ? 0 : divergence[id];
    divergence[id] = (id.x == w-1) ? 0 : divergence[id];
    divergence[id] = (id.y == 0) ? 0 : divergence[id];
    divergence[id] = (id.y == h-1) ? 0 : divergence[id];
    
    divergence[id] = (id.x == 0 && id.y == 0) ? 0.5 * (divergence[uint2(1,0)] + divergence[uint2(0,1)]) : divergence[id];
    divergence[id] = (id.x == 0 && id.y == h-1) ? 0.5 * (divergence[uint2(1,h-1)] + divergence[uint2(0,h-2)]) : divergence[id];
    divergence[id] = (id.x == w-1 && id.y == 0) ? 0.5 * (divergence[uint2(w-2,0)] + divergence[uint2(w-1,1)]) : divergence[id];
    divergence[id] = (id.x == w-1 && id.y == h-1) ? 0.5 * (divergence[uint2(w-2,h-1)] + divergence[uint2(w-1,h-2)]) : divergence[id];
}


//------------------------------------カーネル関数

[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void AddSourceVelocity(uint2 id : SV_DispatchThreadID) {
    float w, h;
    sourceVelocity.GetDimensions(w, h);

    float2 uv = id.xy;
    uv.x /= w;
    uv.y /= h;

    float2 pos = uv - u_mousePos;
    float2 dpdt = pos / u_mouseRadius;
    float pct = saturate(1.-dot(dpdt,dpdt));

    sourceVelocity[id.xy] += pct * u_mouseVel;
}

[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void AddSourceDensity(uint2 id : SV_DispatchThreadID) {
    float w, h;
    sourceDensity.GetDimensions(w, h);

    float2 uv = id.xy;
    uv.x /= w;
    uv.y /= h;

    float2 pos = uv - u_mousePos;
    float2 dpdt = pos / u_mouseRadius;
    float pct = saturate(1.-dot(dpdt,dpdt));

    sourceDensity[id.xy] += pct;
}


[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void ApplySourceVelocity(uint2 id : SV_DispatchThreadID) {
    uint w, h;
    sourceVelocity.GetDimensions(w, h);
    if (id.x > w || id.y > h) return;

    float2 vel = sourceVelocity[id] * u_dt * 0.5 * u_velocityCoef;
    vx[uint2(id.x, id.y)] = vx[uint2(id.x, id.y)] + vel.x;
    vx[uint2(id.x+1, id.y)] = vx[uint2(id.x+1, id.y)] + vel.x;
    vy[uint2(id.x, id.y)] = vy[uint2(id.x, id.y)] + vel.y;
    vy[uint2(id.x, id.y+1)] = vy[uint2(id.x, id.y+1)] + vel.y;

    sourceVelocity[id] = float2(0., 0.);

    SetBoundaryVelocityX(id, w, h);
    SetBoundaryVelocityY(id, w, h);
}

[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void ApplySourceDensity(uint2 id : SV_DispatchThreadID) {
    uint w, h;
    density.GetDimensions(w, h);
    if (id.x > w || id.y > h) return;

    density[id] += sourceDensity[id] * u_densityCoef * u_dt;
    density[id] = min(1, density[id]);
    sourceDensity[id] = 0.;

    SetBoundaryDensity(id, w, h);
}


//---------------------------------------速度場の計算
[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void AdvectVelocityX(uint2 id : SV_DispatchThreadID) {
    uint w, h;
    vx.GetDimensions(w, h);
    if (id.x > w || id.y > h) return;

    float2 px = float2(id.x, id.y+0.5);
    //この点におけるy方向の速度を求める
    float px_vy = (prevVy[uint2(id.x-1,id.y)] + prevVy[uint2(id.x,id.y)] + prevVy[uint2(id.x-1,id.y+1)] + prevVy[uint2(id.x,id.y+1)]) / 4;
    //バックトレース
    float dfdt = u_dt * max(w-1,h);
    px.x -= prevVx[id] * dfdt;
    px.y -= px_vy * dfdt;

    //近傍4点を求める
    float v00, v10, v01, v11;
    int2 pxid = int2(floor(px.x), floor(px.y-0.5));
    v00 = prevVx[int2(pxid.x, pxid.y)];
    v10 = prevVx[int2(pxid.x+1, pxid.y)];
    v01 = prevVx[int2(pxid.x, pxid.y+1)];
    v11 = prevVx[int2(pxid.x+1, pxid.y+1)];

    float s0, s1, t0, t1;
    s0 = px.x - pxid.x;
    t0 = px.y - (pxid.y + 0.5);

    float top = lerp(v00, v10, s0);
    float btm = lerp(v01, v11, s0);
    vx[id] = lerp(top, btm, t0);

    SetBoundaryVelocityX(id, w, h);
}

[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void AdvectVelocityY(uint2 id : SV_DispatchThreadID) {
    uint w, h;
    vy.GetDimensions(w, h);
    if (id.x > w || id.y > h) return;
    
    float2 px = float2(id.x+0.5, id.y);
    //この点におけるy方向の速度を求める
    float px_vx = (prevVx[uint2(id.x-1,id.y)] + prevVx[uint2(id.x,id.y)] + prevVx[uint2(id.x-1,id.y+1)] + prevVx[uint2(id.x,id.y+1)]) / 4;
    //バックトレース
    float dfdt = u_dt * max(w,h-1);
    px.x -= px_vx * dfdt;
    px.y -= prevVy[id] * dfdt;

    //近傍4点を求める
    float v00, v10, v01, v11;
    int2 pxid = int2(floor(px.x-0.5), floor(px.y)); 
    v00 = prevVy[int2(pxid.x, pxid.y)];
    v10 = prevVy[int2(pxid.x+1, pxid.y)];
    v01 = prevVy[int2(pxid.x, pxid.y+1)];
    v11 = prevVy[int2(pxid.x+1, pxid.y+1)];

    float s0, s1, t0, t1;
    s0 = px.x - (pxid.x + 0.5);
    t0 = px.y - pxid.y;

    float top = lerp(v00, v10, s0);
    float btm = lerp(v01, v11, s0);
    vy[id] = lerp(top, btm, t0);

    SetBoundaryVelocityY(id, w, h);
}

[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void DiffuseVelocityX(uint2 id : SV_DispatchThreadID) {
    uint w, h;
    vx.GetDimensions(w, h);
    if (id.x > w || id.y > h) return;

    float l = max(w-1, h);
    float a = u_dt * u_dt * u_visc * l * l; //ここdtが二乗じゃなくてもいいかもしれない結局係数入ってるし
    vx[id] = (prevVx[id] + a * (vx[int2(id.x - 1, id.y)] + vx[int2(id.x + 1, id.y)] + vx[int2(id.x, id.y - 1)] + vx[int2(id.x, id.y + 1)])) / (1 + 4 * a);

    SetBoundaryVelocityX(id, w, h);
}

[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void DiffuseVelocityY(uint2 id : SV_DispatchThreadID) {
    uint w, h;
    vy.GetDimensions(w, h);
    if (id.x > w || id.y > h) return;

    float l = max(w, h-1);
    float a = u_dt * u_dt * u_visc * l * l; //ここdtが二乗じゃなくてもいいかもしれない結局係数入ってるし
    vy[id] = (prevVy[id] + a * (vy[int2(id.x - 1, id.y)] + vy[int2(id.x + 1, id.y)] + vy[int2(id.x, id.y - 1)] + vy[int2(id.x, id.y + 1)])) / (1 + 4 * a);
    
    SetBoundaryVelocityY(id, w, h);
}


//非圧縮性流体の為、速度divergenceの流出入を∇･u = 0にする外圧pを求め、速度場に投影.
//質量保存Step1.
//step1では、速度場から発散の算出.
[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void ProjectStep1(uint2 id : SV_DispatchThreadID) {
    uint w, h;
    divergence.GetDimensions(w, h);
    if (id.x > w || id.y > h) return;

    float dx = 1.0 / max(w,h);
    divergence[id] = (vx[uint2(id.x+1, id.y)] - vx[uint2(id.x, id.y)] + vy[uint2(id.x, id.y+1)] - vy[uint2(id.x, id.y)]) * dx;

    SetBoundaryDivergence(id, w, h);
}

//質量保存Step2.
//step2では、step1で求めた発散からPoisson方程式をガウス・ザイデル法で解く.
[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void ProjectStep2(uint2 id : SV_DispatchThreadID) {
    uint w, h;
    pressure.GetDimensions(w, h);

    if (id.x > w || id.y > h) return;

    float divPressure = divergence[id];

    float dx = 1.0 / max(w,h);

    //ここΔxとΔyが等しいとき
    pressure[id] = (-divPressure /*dx*dx*/ / u_dt +
                        pressure[int2(id.x - 1, id.y)] + pressure[int2(id.x + 1, id.y)] + 
                        pressure[int2(id.x, id.y - 1)] + pressure[int2(id.x, id.y + 1)]) /4;

    SetBoundaryPressure(id, w, h);
}

//質量保存Step3.
//step3で、∇･u = 0にする.
[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void ProjectStep3X(uint2 id : SV_DispatchThreadID) {
    uint w, h;
    vx.GetDimensions(w, h);
    if (id.x > w || id.y > h) return;

    float dx = 1.0 / max(w-1,h);

    float gradp = (pressure[uint2(id.x, id.y)] - pressure[uint2(id.x-1, id.y)]) / dx;
    vx[id] -= gradp * u_dt;

    SetBoundaryVelocityX(id, w, h);
}

[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void ProjectStep3Y(uint2 id : SV_DispatchThreadID) {
    uint w, h;
    vy.GetDimensions(w, h);
    if (id.x > w || id.y > h) return;

    float dx = 1.0 / max(w,h-1);

    float gradp = (pressure[uint2(id.x, id.y)] - pressure[uint2(id.x, id.y-1)]) / dx;
    vy[id] -= gradp * u_dt;

    SetBoundaryVelocityY(id, w, h);
}

//---------------------------------------密度場の計算
[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void DiffuseDensity(uint2 id : SV_DispatchThreadID) {
    uint w, h;
    density.GetDimensions(w, h);
    if (id.x > w || id.y > h) return;

    float a = u_dt * u_dt * u_diff * w * h; //ここdtが二乗じゃなくてもいいかもしれない結局係数入ってるし
    
    density[id] = (prevDensity[id] + 
                        a * (density[int2(id.x - 1, id.y)] + density[int2(id.x + 1, id.y)] + density[int2(id.x, id.y - 1)] + density[int2(id.x, id.y + 1)])) / (1 + 4 * a);
    SetBoundaryDensity(id, w, h);
}

[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void AdvectDensity(uint2 id : SV_DispatchThreadID) {
    uint w, h;
    density.GetDimensions(w, h);
    if (id.x > w || id.y > h) return;

    int ddx0, ddx1, ddy0, ddy1;
    float x, y, s0, t0, s1, t1, dfdt_x, dfdt_y;

    float dfdt = u_dt * max(w, h);

    //速さは四方の速さ格子の平均をとる
    float2 vel = float2((vx[int2(id.x,id.y)] + vx[int2(id.x+1,id.y)])*0.5, (vy[int2(id.x,id.y)] + vy[int2(id.x,id.y+1)])*0.5);


    //バックトレースポイント割り出し.
    x = (float)id.x - dfdt * vel.x;
    y = (float)id.y - dfdt * vel.y;
    //ポイントがシミュレーション範囲内に収まるようにクランプ.
    //clamp(x, 0.5, w - 0.5);
    //clamp(y, 0.5, h - 0.5);
    //xyのそれぞれ近似の偏微分セルを求める.
    ddx0 = floor(x);
    ddx1 = ddx0 + 1;
    ddy0 = floor(y);
    ddy1 = ddy0 + 1;
    //近傍セルとの線形補間用の差分を取っておく.
    s1 = x - ddx0;
    s0 = 1.0 - s1;
    t1 = y - ddy0;
    t0 = 1.0 - t1;

    //バックトレースし、1step前の値を近傍との線形補間をとって、現在の速度場に代入。
    density[id] = s0 * (t0 * density[int2(ddx0, ddy0)] + t1 * density[int2(ddx0, ddy1)]) +
                      s1 * (t0 * density[int2(ddx1, ddy0)] + t1 * density[int2(ddx1, ddy1)]);

    //境界値の例外
    SetBoundaryDensity(id, w, h);
}

[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void DissipateDensity(uint2 id : SV_DispatchThreadID) {
}

//描画用バッファに書き込み
[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void Draw(uint2 id : SV_DispatchThreadID) {
    float pct = density[id.xy];
    
    pct = saturate(pct);
    float3 col = float3(pct, pct, pct);
    //col = float3(vx[id], vy[id], 0);
    //col = (col + 1) * 0.5;

    canvas[id.xy] = float4(1.- col, 1);
}